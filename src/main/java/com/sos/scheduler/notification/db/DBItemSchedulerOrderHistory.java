package com.sos.scheduler.notification.db;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.log4j.Logger;

import com.sos.hibernate.classes.DbItem;
//import com.sos.scheduler.history.db.SchedulerHistoryLogDBItem;
 



/**
* \class SchedulerOrderHistoryDBItem
*
* \brief SchedulerOrderHistoryDBItem -
*
* \details
*
* \section SchedulerOrderHistoryDBItem.java_intro_sec Introduction
*
* \section SchedulerOrderHistoryDBItem.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 13.05.2011
* \see reference
*
* Created on 13.05.2011 16:42:58
 */


@Entity
@Table(name=DBLayerSchedulerMon.TABLE_SCHEDULER_ORDER_HISTORY)
//public class DBItemSchedulerOrderHistory extends  SchedulerHistoryLogDBItem {
public class DBItemSchedulerOrderHistory extends DbItem implements Serializable{
     /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	private static Logger       logger          = Logger.getLogger(DBItemSchedulerOrderHistory.class);

	 private Long historyId;
	 private String spoolerId;
	 private String orderId;
	 private String jobChain;
	 private Date startTime;
     private Date endTime;
     private String title;
     private String state;
     private String stateText;
     List<DBItemSchedulerOrderStepHistory> schedulerOrderStepHistory;
      

//     private  List <SchedulerOrderStepHistoryDBItem> schedulerOrderStepHistory;

     private boolean assignToDaysScheduler=false;

	public DBItemSchedulerOrderHistory() {
	    assignToDaysScheduler=false;
	}

    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="`HISTORY_ID`",nullable=false)
    public Long getHistoryId() {
		return historyId;
	}


    @Column(name="`HISTORY_ID`",nullable=false)
	public void setHistoryId(final Long id) {
		historyId = id;
	}

	@OneToMany(mappedBy="schedulerOrderHistoryDBItem")
	//@Cascade()
	//@Fetch(FetchMode.JOIN)
	public List <DBItemSchedulerOrderStepHistory> getSchedulerOrderStepHistory(){
		return schedulerOrderStepHistory;
	}
	public void setSchedulerOrderStepHistory(List <DBItemSchedulerOrderStepHistory> schedulerOrderStepHistory){
		this.schedulerOrderStepHistory = schedulerOrderStepHistory;
    }


   @Override
@Column(name="`SPOOLER_ID`",nullable=false)
	public String getSpoolerId() {
		return spoolerId;
	}

   @Column(name="`SPOOLER_ID`",nullable=false)
	public void setSpoolerId(final String spoolerId) {
		this.spoolerId = spoolerId;
	}

   @Override
@Column(name="`ORDER_ID`",nullable=false)
	public String getOrderId() {
		return orderId;
	}

   @Column(name="`ORDER_ID`",nullable=false)
	public void setOrderId(final String orderId) {
		this.orderId = orderId;
	}

   @Override
@Column(name="`JOB_CHAIN`",nullable=false)
   public String getJobChain() {
		return jobChain;
	}

   @Column(name="`JOB_CHAIN`",nullable=false)
	public void setJobChain(String val) {
	   if(val != null &&  val.startsWith("/")){
			val = val.substring(1);
		}
	   
		this.jobChain = val;
	}

   @Column(name="`START_TIME`", nullable=false)
   @Temporal(TemporalType.TIMESTAMP)
   public Date getStartTime() {
		return startTime;
	}

   @Column(name="`START_TIME`", nullable=false)
   @Temporal(TemporalType.TIMESTAMP)
	public void setStartTime(final Date startTime) {
		this.startTime = startTime;
	}

   @Override
@Column(name="`END_TIME`", nullable=true)
   @Temporal(TemporalType.TIMESTAMP)
	public Date getEndTime() {
		return endTime;
	}



   @Column(name="`END_TIME`", nullable=true)
   @Temporal(TemporalType.TIMESTAMP)
	public void setEndTime(final Date endTime) {
		this.endTime = endTime;
	}

   @Column(name="`TITLE`", nullable=true)
	public String getCause() {
 		return title;
	}

   @Column(name="`TITLE`", nullable=true)
	public void setCause(final String title) {
		this.title = title;
	}

   @Override
@Column(name="`STATE`", nullable=true)
	public String getState() {
		return state;
	}

  @Column(name="`STATE`", nullable=true)
	public void setState(final String state) {
		this.state = state;
	}

 
  @Transient
  public String getStartTimeIso() {
		if (this.getStartTime() == null) {
			return "";
		}else{
		    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		    String startTimeIso = formatter.format(this.getStartTime());
		    return startTimeIso;
		}
	}

  @Transient
  public String getEndTimeIso() {
		if (this.getEndTime() == null) {
			return "";
		}else{
		    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		    String endTimeIso = formatter.format(this.getEndTime());
		    return endTimeIso;
		}
	}



   
   @Column(name="`STATE_TEXT`",nullable=true)
	public String getStateText() {
	    return stateText;
	}

   @Column(name="`STATE_TEXT`",nullable=true)
	public void setStateText(final String stateText) {
		this.stateText = stateText;
	}

   //If the name would be getStartTimeIso, a setter for startTimeIso must be implemented
   public String readStartTimeIso() {
		if (this.getStartTime() == null) {
			return "";
		}else{
		    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		    String startTimeIso = formatter.format(this.getStartTime());
		    return startTimeIso;
		}
	}

   //If the name would be getEndTimeIso, a setter for endTimeIso must be implemented
   public String readEndTimeIso() {
		if (this.getEndTime() == null) {
			return "";
		}else{
		    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		    String endTimeIso = formatter.format(this.getEndTime());
		    return endTimeIso;
		}
	}
	 @Override
	@Transient
	    public String getStartTimeFormated(){
	        return getDateFormatted(this.getStartTime());
	 	}
	 @Override
	@Transient
	    public String getEndTimeFormated(){
	        return getDateFormatted(this.getEndTime());
	 	}

	 @Override
	@Transient
	    public String getDurationFormated(){
		 return this.getDateDiff(this.getStartTime(),this.getEndTime());
	 	}


   @Transient
   public boolean isAssignToDaysScheduler() {
		return assignToDaysScheduler;
	}

   @Transient
  	public String getJobOrJobchain() {   
  	   return null2Blank(String.format("%s(%s)",getJobChain(),getOrderId()));      
  	}  
   
   
	@Transient
	public void setAssignToDaysScheduler(final boolean assignToDaysScheduler) {
		this.assignToDaysScheduler = assignToDaysScheduler;
	}

	@Override
	@Transient
	public Long getLogId() {
		return this.getHistoryId();
	}

	@Override
	@Transient
	public String getIdentifier(){
 		return this.getJobChain() + "/" + this.getOrderId();
	}

	@Override
	@Transient
	public boolean isStandalone() {
 		return false;
 	}

	@Override
	@Transient
	public String getSchedulerId() {
 		return this.getSpoolerId();
 	}

	@Override
	@Transient
	public String getTitle() {
		return jobChain + "/" + orderId  ;
	}

	@Override
	@Transient
	public String getExecResult() {
		return this.getState();
	}

	@Override
	@Transient
	public boolean haveError() {

	    if (this.getState() == null) {
	        return false;
	    }else {
		    return this.getState().toLowerCase().contains("error") ||
                  this.getState().toLowerCase().contains("fehler") ||
                  this.getState().startsWith("!")  ||
				  this.getState().toLowerCase().contains("fault");
	    }
	}

	@Override
	@Transient
	public boolean equals(final Object h) {
		return ((DBItemSchedulerOrderHistory) h).getJobChain().equals(this.getJobChain()) && ((DBItemSchedulerOrderHistory) h).getOrderId().equals(this.getOrderId());
	}
	
	/**
    @Transient
    @Override
    public boolean isOrderJob() {
        return true;
    }*/
 
}

